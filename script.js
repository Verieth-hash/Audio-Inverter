// script.js
document.addEventListener('DOMContentLoaded', () => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
    const recordButton = document.getElementById('recordButton');
    const recordingStatus = document.getElementById('recordingStatus');
    const miniVisualizerCanvas = document.getElementById('mini-visualizer-canvas');
    const miniCtx = miniVisualizerCanvas.getContext('2d');

    const fileInput = document.getElementById('fileInput');
    const uploadStatus = document.getElementById('uploadStatus');

    const playOriginalButton = document.getElementById('playOriginalButton');
    const playProcessedButton = document.getElementById('playProcessedButton');
    const playBothButton = document.getElementById('playBothButton');
    const stopButton = document.getElementById('stopButton');

    const originalIndicator = document.getElementById('originalIndicator');
    const processedIndicator = document.getElementById('processedIndicator');

    const mainVisualizerCanvas = document.getElementById('mainVisualizerCanvas');
    const mainCtx = mainVisualizerCanvas.getContext('2d');
    const waveformViewButton = document.getElementById('waveformViewButton');
    const frequencyViewButton = document.getElementById('frequencyViewButton');

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö–æ–ª—Å—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å—Ç–∏–ª–µ–π
    function resizeMainCanvas() {
        mainVisualizerCanvas.width = mainVisualizerCanvas.offsetWidth;
        mainVisualizerCanvas.height = 200; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π
    }
    resizeMainCanvas();
    window.addEventListener('resize', resizeMainCanvas); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Web Audio API –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let audioContext;
    let originalBuffer = null;      // –ë—É—Ñ–µ—Ä –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ
    let processedBuffer = null;     // –ë—É—Ñ–µ—Ä –¥–ª—è –∞—É–¥–∏–æ —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∞–∑–æ–π
    
    let mediaRecorder;              // –û–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
    let audioChunks = [];           // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
    let isRecording = false;        // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏

    let sourceNodeOriginal = null;  // –£–∑–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ
    let sourceNodeProcessed = null; // –£–∑–µ–ª –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
    let analyserNode = null;        // –£–∑–µ–ª –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    
    let visualizationType = 'waveform'; // –¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: 'waveform' –∏–ª–∏ 'frequency'
    let animationFrameId = null;        // ID –¥–ª—è requestAnimationFrame (–æ—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
    let liveStreamAnalyserNode = null;  // –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä)
    let liveStreamSource = null;        // –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Ç–æ–∫–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    let liveStreamAnimationId = null;   // ID –¥–ª—è requestAnimationFrame (–º–∏–Ω–∏-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioContext –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function initAudioContext() {
        if (!audioContext) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
        }
    }

    // --- –õ–æ–≥–∏–∫–∞ –ó–∞–ø–∏—Å–∏ ---
    recordButton.addEventListener('click', () => {
        initAudioContext(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ AudioContext –≥–æ—Ç–æ–≤
        if (!isRecording) {
            startRecording();
        } else {
            stopRecording();
        }
    });

    async function startRecording() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            isRecording = true;
            recordButton.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ó–∞–ø–∏—Å—å';
            recordButton.style.backgroundColor = 'var(--red-accent)'; // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
            recordingStatus.textContent = 'üî¥ –ò–¥—ë—Ç –∑–∞–ø–∏—Å—å...';
            audioChunks = [];
            
            // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            const options = { mimeType: 'audio/webm;codecs=opus' }; 
            if (!MediaRecorder.isTypeSupported(options.mimeType)) {
                console.log(options.mimeType + ' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                mediaRecorder = new MediaRecorder(stream);
            } else {
                mediaRecorder = new MediaRecorder(stream, options);
            }

            mediaRecorder.ondataavailable = event => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = async () => {
                isRecording = false;
                recordButton.textContent = '–ù–∞—á–∞—Ç—å –ó–∞–ø–∏—Å—å';
                recordButton.style.backgroundColor = ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç
                recordingStatus.textContent = '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...';
                stopLiveVisualizer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
                stream.getTracks().forEach(track => track.stop()); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω

                const audioBlob = new Blob(audioChunks, { type: mediaRecorder.mimeType || 'audio/webm' });
                const arrayBuffer = await audioBlob.arrayBuffer();
                
                audioContext.decodeAudioData(arrayBuffer, decodedBuffer => {
                    originalBuffer = decodedBuffer;
                    processedBuffer = invertPhase(originalBuffer);
                    recordingStatus.textContent = '‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤–æ!';
                    uploadStatus.textContent = '–ó–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
                    updatePlaybackButtonsState(true);
                    visualizeBufferStatic(originalBuffer, 'waveform'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É –≤–æ–ª–Ω—ã
                }, error => {
                    console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
                    recordingStatus.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.';
                    uploadStatus.textContent = '–ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
                    updatePlaybackButtonsState(false);
                });
            };

            mediaRecorder.start();
            startLiveVisualizer(stream); // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', err);
            recordingStatus.textContent = '‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â—ë–Ω.';
            isRecording = false;
            recordButton.style.backgroundColor = '';
        }
    }

    function stopRecording() {
        if (mediaRecorder && mediaRecorder.state === "recording") {
            mediaRecorder.stop();
            // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤ mediaRecorder.onstop
        }
    }

    function startLiveVisualizer(stream) {
        if (!audioContext) initAudioContext();
        liveStreamSource = audioContext.createMediaStreamSource(stream);
        liveStreamAnalyserNode = audioContext.createAnalyser();
        liveStreamAnalyserNode.fftSize = 256; // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–∏–Ω–∏-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        liveStreamSource.connect(liveStreamAnalyserNode); // –ù–ï –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫ audioContext.destination, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ö–∞
        
        const bufferLength = liveStreamAnalyserNode.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);

        miniCtx.clearRect(0, 0, miniVisualizerCanvas.width, miniVisualizerCanvas.height);

        function drawLive() {
            liveStreamAnimationId = requestAnimationFrame(drawLive);
            liveStreamAnalyserNode.getByteTimeDomainData(dataArray); // –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏

            miniCtx.fillStyle = '#1a1222'; // –§–æ–Ω, –∫–∞–∫ —É –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            miniCtx.fillRect(0, 0, miniVisualizerCanvas.width, miniVisualizerCanvas.height);
            miniCtx.lineWidth = 1.5;
            miniCtx.strokeStyle = 'var(--primary-accent)'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç

            miniCtx.beginPath();
            const sliceWidth = miniVisualizerCanvas.width * 1.0 / bufferLength;
            let x = 0;

            for (let i = 0; i < bufferLength; i++) {
                const v = dataArray[i] / 128.0; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–π—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (0-255)
                const y = v * miniVisualizerCanvas.height / 2;
                if (i === 0) miniCtx.moveTo(x, y);
                else miniCtx.lineTo(x, y);
                x += sliceWidth;
            }
            miniCtx.lineTo(miniVisualizerCanvas.width, miniVisualizerCanvas.height / 2);
            miniCtx.stroke();
        }
        drawLive();
    }

    function stopLiveVisualizer() {
        if (liveStreamAnimationId) {
            cancelAnimationFrame(liveStreamAnimationId);
            liveStreamAnimationId = null;
        }
        if (liveStreamSource) {
            liveStreamSource.disconnect();
            liveStreamSource = null;
        }
        if (liveStreamAnalyserNode) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω
            liveStreamAnalyserNode.disconnect();
            liveStreamAnalyserNode = null;
        }
        // –û—á–∏—â–∞–µ–º –º–∏–Ω–∏-—Ö–æ–ª—Å—Ç
        miniCtx.fillStyle = '#1a1222';
        miniCtx.fillRect(0, 0, miniVisualizerCanvas.width, miniVisualizerCanvas.height); 
    }


    // --- –õ–æ–≥–∏–∫–∞ –ó–∞–≥—Ä—É–∑–∫–∏ –§–∞–π–ª–∞ ---
    fileInput.addEventListener('change', event => {
        initAudioContext();
        const file = event.target.files[0];
        if (file) {
            uploadStatus.textContent = `‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞: ${file.name}`;
            const reader = new FileReader();
            reader.onload = e => {
                audioContext.decodeAudioData(e.target.result, decodedBuffer => {
                    originalBuffer = decodedBuffer;
                    processedBuffer = invertPhase(originalBuffer);
                    uploadStatus.textContent = `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${file.name}`;
                    recordingStatus.textContent = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
                    updatePlaybackButtonsState(true);
                    visualizeBufferStatic(originalBuffer, 'waveform'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É –≤–æ–ª–Ω—ã
                }, error => {
                    console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:', error);
                    uploadStatus.textContent = `‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${file.name}`;
                    updatePlaybackButtonsState(false);
                });
            };
            reader.onerror = () => { // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                uploadStatus.textContent = `‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${file.name}`;
                updatePlaybackButtonsState(false);
            };
            reader.readAsArrayBuffer(file);
        }
    });

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ê—É–¥–∏–æ (–ò–Ω–≤–µ—Ä—Å–∏—è –§–∞–∑—ã) ---
    function invertPhase(buffer) {
        if (!buffer) return null;
        const numChannels = buffer.numberOfChannels;
        const length = buffer.length;
        const sampleRate = buffer.sampleRate;
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const invertedBuffer = audioContext.createBuffer(numChannels, length, sampleRate);

        for (let channel = 0; channel < numChannels; channel++) {
            const originalData = buffer.getChannelData(channel);
            const invertedData = invertedBuffer.getChannelData(channel);
            for (let i = 0; i < length; i++) {
                invertedData[i] = -originalData[i]; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–∑—É (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ -1)
            }
        }
        return invertedBuffer;
    }

    // --- –õ–æ–≥–∏–∫–∞ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ---
    function stopAllAudio() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–≤—É–∫–∞
        if (sourceNodeOriginal) {
            sourceNodeOriginal.onended = null; // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            try { sourceNodeOriginal.stop(); } catch (e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω */ }
            sourceNodeOriginal.disconnect();
            sourceNodeOriginal = null;
        }
        if (sourceNodeProcessed) {
            sourceNodeProcessed.onended = null;
            try { sourceNodeProcessed.stop(); } catch (e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ */ }
            sourceNodeProcessed.disconnect();
            sourceNodeProcessed = null;
        }
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç –≤—ã—Ö–æ–¥–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if (analyserNode) {
            analyserNode.disconnect(); 
        }
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
            animationFrameId = null;
        }
        updateIndicators(false, false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        stopButton.disabled = true;    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø"
    }
    
    stopButton.addEventListener('click', stopAllAudio);

    // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
    function playAudio(buffer, type) {
        if (!buffer || !audioContext) return;
        stopAllAudio(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

        analyserNode = audioContext.createAnalyser(); // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º —Å–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        
        const source = audioContext.createBufferSource();
        source.buffer = buffer;
        source.connect(analyserNode); // –ò—Å—Ç–æ—á–Ω–∏–∫ -> –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyserNode.connect(audioContext.destination); // –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä -> –í—ã—Ö–æ–¥ (–¥–∏–Ω–∞–º–∏–∫–∏)
        
        source.start(0);
        source.onended = () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if ((type === 'original' && source === sourceNodeOriginal) || (type === 'processed' && source === sourceNodeProcessed)) {
                 updateIndicators(type === 'original' ? false : originalIndicator.classList.contains('playing'), 
                                 type === 'processed' ? false : processedIndicator.classList.contains('playing'));
            }
             // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø", –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            if (!sourceNodeOriginal && !sourceNodeProcessed) {
                stopButton.disabled = true;
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É
            if (!sourceNodeOriginal && !sourceNodeProcessed && animationFrameId) {
                cancelAnimationFrame(animationFrameId);
                animationFrameId = null;
                visualizeBufferStatic(originalBuffer, visualizationType); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª
            }
        };

        if (type === 'original') {
            sourceNodeOriginal = source;
            updateIndicators(true, false); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–≥—Ä–∞–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π - –Ω–µ—Ç
        } else if (type === 'processed') {
            sourceNodeProcessed = source;
            updateIndicators(false, true); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–≥—Ä–∞–µ—Ç, –æ—Ä–∏–≥–∏–Ω–∞–ª - –Ω–µ—Ç
        }
        
        stopButton.disabled = false; // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø"
        drawVisualizationLoop();     // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    }

    playOriginalButton.addEventListener('click', () => playAudio(originalBuffer, 'original'));
    playProcessedButton.addEventListener('click', () => playAudio(processedBuffer, 'processed'));

    playBothButton.addEventListener('click', () => {
        if (!originalBuffer || !processedBuffer || !audioContext) return;
        stopAllAudio();

        analyserNode = audioContext.createAnalyser();

        sourceNodeOriginal = audioContext.createBufferSource();
        sourceNodeOriginal.buffer = originalBuffer;

        sourceNodeProcessed = audioContext.createBufferSource();
        sourceNodeProcessed.buffer = processedBuffer;
        
        // –û–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫ –û–î–ù–û–ú–£ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—É–º–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        sourceNodeOriginal.connect(analyserNode);
        sourceNodeProcessed.connect(analyserNode); 
        analyserNode.connect(audioContext.destination); // –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫ –≤—ã—Ö–æ–¥—É

        sourceNodeOriginal.start(0);
        sourceNodeProcessed.start(0);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let endedCount = 0;
        const onBothEnded = () => {
            endedCount++;
            if (endedCount === 2) { // –ö–æ–≥–¥–∞ –æ–±–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
                updateIndicators(false, false);
                stopButton.disabled = true;
                 if (animationFrameId) { // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É
                    cancelAnimationFrame(animationFrameId);
                    animationFrameId = null;
                    visualizeBufferStatic(originalBuffer, visualizationType);
                }
            }
        };
        sourceNodeOriginal.onended = onBothEnded;
        sourceNodeProcessed.onended = onBothEnded;
        
        updateIndicators(true, true); // –û–±–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±–∞ "—É—á–∞—Å—Ç–≤—É—é—Ç")
        stopButton.disabled = false;
        drawVisualizationLoop();
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    function updatePlaybackButtonsState(enabled) {
        playOriginalButton.disabled = !enabled;
        playProcessedButton.disabled = !enabled;
        playBothButton.disabled = !enabled;
        
        // –ö–ª–∞—Å—Å 'active' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
        originalIndicator.classList.toggle('active', enabled);
        processedIndicator.classList.toggle('active', enabled);
        
        if (!enabled) { // –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ—Ç (–∏–ª–∏ –≤—ã–≥—Ä—É–∂–µ–Ω–æ)
            stopButton.disabled = true; // –ö–Ω–æ–ø–∫–∞ "–°—Ç–æ–ø" –Ω–µ –Ω—É–∂–Ω–∞
            updateIndicators(false, false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
            if (animationFrameId) { // –ï—Å–ª–∏ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                cancelAnimationFrame(animationFrameId);
                animationFrameId = null;
                visualizeBufferStatic(null, visualizationType); // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–æ–ª—Å—Ç
            }
        }
    }
    updatePlaybackButtonsState(false); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
    function updateIndicators(originalPlaying, processedPlaying) {
        originalIndicator.classList.toggle('playing', originalPlaying);
        processedIndicator.classList.toggle('playing', processedPlaying);
    }

    // --- –õ–æ–≥–∏–∫–∞ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
    waveformViewButton.addEventListener('click', () => {
        visualizationType = 'waveform';
        waveformViewButton.classList.add('active');
        frequencyViewButton.classList.remove('active');
        // –ï—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
        if (!animationFrameId && originalBuffer) { 
             visualizeBufferStatic(originalBuffer, 'waveform');
        }
    });

    frequencyViewButton.addEventListener('click', () => {
        visualizationType = 'frequency';
        frequencyViewButton.classList.add('active');
        waveformViewButton.classList.remove('active');
         if (!animationFrameId && originalBuffer) { 
            visualizeBufferStatic(originalBuffer, 'frequency'); // –î–ª—è —á–∞—Å—Ç–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
    });
    
    // –¶–∏–∫–ª –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    function drawVisualizationLoop() {
        if (!analyserNode) return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º, –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ stopAllAudio)
        animationFrameId = requestAnimationFrame(drawVisualizationLoop);

        mainCtx.fillStyle = '#1a1222'; // –§–æ–Ω —Ö–æ–ª—Å—Ç–∞
        mainCtx.fillRect(0, 0, mainVisualizerCanvas.width, mainVisualizerCanvas.height);

        if (visualizationType === 'waveform') { // –§–æ—Ä–º–∞ –≤–æ–ª–Ω—ã
            analyserNode.fftSize = 2048; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ñ–æ—Ä–º—ã –≤–æ–ª–Ω—ã
            const bufferLength = analyserNode.frequencyBinCount; // –î–ª—è getByteTimeDomainData —ç—Ç–æ –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞
            const dataArray = new Uint8Array(bufferLength);
            analyserNode.getByteTimeDomainData(dataArray);

            mainCtx.lineWidth = 2;
            mainCtx.strokeStyle = 'var(--primary-accent)'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            mainCtx.beginPath();

            const sliceWidth = mainVisualizerCanvas.width * 1.0 / bufferLength;
            let x = 0;
            for (let i = 0; i < bufferLength; i++) {
                const v = dataArray[i] / 128.0; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–π—Ç (0-255) –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-2
                const y = v * mainVisualizerCanvas.height / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                if (i === 0) mainCtx.moveTo(x, y);
                else mainCtx.lineTo(x, y);
                x += sliceWidth;
            }
            mainCtx.lineTo(mainVisualizerCanvas.width, mainVisualizerCanvas.height / 2); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–∏–Ω–∏—é –ø–æ —Ü–µ–Ω—Ç—Ä—É
            mainCtx.stroke();
        } else if (visualizationType === 'frequency') { // –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            analyserNode.fftSize = 1024; // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, 1024 –¥–∞–µ—Ç 512 —Å—Ç–æ–ª–±—Ü–æ–≤ (—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –±–∏–Ω–æ–≤)
            const bufferLength = analyserNode.frequencyBinCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤ = fftSize / 2
            const dataArray = new Uint8Array(bufferLength);
            analyserNode.getByteFrequencyData(dataArray); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å—Ç–æ—Ç–∞–º

            const barWidth = (mainVisualizerCanvas.width / bufferLength) * 1.2; // –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            let x = 0;
            for (let i = 0; i < bufferLength; i++) {
                const barHeightFraction = dataArray[i] / 255.0; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—ã—Å–æ—Ç—É (0-1)
                const barHeight = barHeightFraction * mainVisualizerCanvas.height;
                
                // –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤: –ö—Ä–∞—Å–Ω—ã–π (–Ω–∏–∑–∫–∏–µ) -> –ñ–µ–ª—Ç—ã–π -> –ó–µ–ª–µ–Ω—ã–π (–≤—ã—Å–æ–∫–∏–µ)
                const hue = (i / bufferLength) * 120 ; // 0=–∫—Ä–∞—Å–Ω—ã–π, 60=–∂–µ–ª—Ç—ã–π, 120=–∑–µ–ª–µ–Ω—ã–π
                // –Ø—Ä–∫–æ—Å—Ç—å —Å—Ç–æ–ª–±—Ü–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ –≤—ã—Å–æ—Ç—ã, –Ω–æ –Ω–µ –Ω–∏–∂–µ 20%
                mainCtx.fillStyle = `hsl(${hue}, 100%, ${Math.max(20, 50 * barHeightFraction)}%)`; 

                mainCtx.fillRect(x, mainVisualizerCanvas.height - barHeight, barWidth, barHeight); // –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                x += barWidth + 0.5; // –°–º–µ—â–∞–µ–º—Å—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–∑–æ—Ä–æ–º
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –≤–æ–ª–Ω—ã/—á–∞—Å—Ç–æ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏)
    function visualizeBufferStatic(buffer, type) {
        if (animationFrameId) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ –∏–¥–µ—Ç –∂–∏–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
             cancelAnimationFrame(animationFrameId);
             animationFrameId = null;
        }

        mainCtx.fillStyle = '#1a1222'; // –§–æ–Ω —Ö–æ–ª—Å—Ç–∞
        mainCtx.fillRect(0, 0, mainVisualizerCanvas.width, mainVisualizerCanvas.height);

        if (!buffer) return; // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç

        if (type === 'waveform') {
            const channelData = buffer.getChannelData(0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            const bufferLength = channelData.length;

            mainCtx.lineWidth = 1; // –¢–æ–Ω—å—à–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
            mainCtx.strokeStyle = 'var(--primary-accent)';
            mainCtx.beginPath();

            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Ä–∏—Å—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π
            const samplesToDraw = mainVisualizerCanvas.width * 2; // –†–∏—Å—É–µ–º –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            const step = Math.max(1, Math.floor(bufferLength / samplesToDraw));
            
            for (let i = 0; i < bufferLength; i += step) {
                const x = (i / bufferLength) * mainVisualizerCanvas.width;
                const v = (channelData[i] + 1) / 2.0; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (-1 –¥–æ 1) –∫ (0 –¥–æ 1)
                const y = (1 - v) * mainVisualizerCanvas.height; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç canvas
                if (i === 0) mainCtx.moveTo(x, y);
                else mainCtx.lineTo(x, y);
            }
            mainCtx.stroke();

        } else if (type === 'frequency') {
            // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª—Å—è –±—ã FFT –Ω–∞ –≤—Å–µ–º –±—É—Ñ–µ—Ä–µ,
            // —á—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º getByteFrequencyData –∏–∑ AnalyserNode.
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
            mainCtx.font = "16px var(--font-main)";
            mainCtx.fillStyle = "grey";
            mainCtx.textAlign = "center";
            mainCtx.fillText("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–∏–¥ —á–∞—Å—Ç–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.", mainVisualizerCanvas.width/2, mainVisualizerCanvas.height/2);
        }
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞
        waveformViewButton.classList.toggle('active', type === 'waveform');
        frequencyViewButton.classList.toggle('active', type === 'frequency');
        visualizationType = type; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    }
    
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    visualizeBufferStatic(null, 'waveform'); // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    stopLiveVisualizer(); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∏–Ω–∏-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—á–∏—â–µ–Ω
    uploadStatus.textContent = '–ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'; // –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
});